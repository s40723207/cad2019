var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Week', 'text': '', 'tags': '', 'url': 'Week.html'}, {'title': 'Week2~Week5', 'text': 'Week2 \n Week 2 將建立好的的倉儲利用 cmsimde，建立網誌。 \n 練習開啟近端，並修改網頁，轉換成靜態，最終上傳倉儲。 \n \n Week3 \n 為了能夠使用Solvesoace，要將程式編譯進可攜系統中． \n 按照網頁上的步驟一步一步的作業，就可以使用了。 \n \n Week4 \n 這周沒有進度，主要是將前兩周的作業完成， \n 並拍成影片，再經由後製軟體上字幕。 \n Week5 \n 利用Solvespace練習會話3D圖形 \n \n', 'tags': '', 'url': 'Week2~Week5.html'}, {'title': 'Week6~Week9', 'text': 'Week6 \n 利用Solvespace畫出車子 \n \n V-rep 模型控制 \n \n Week7 \n 更換solvespace中about的內容 \n \n solvespace繪圖 13 \n \n solvespace繪圖 14 \n \n \n Week8 \n 開啟blog \n \n 建立ssh \n \n 建立webots \n \n', 'tags': '', 'url': 'Week6~Week9.html'}, {'title': 'Week10~Week14', 'text': 'Webot tutorial 1 \n \n Webot tutorial 2 \n \n Webot tutorial 3 \n \n Vrep\xa0bubbleRob \n \n Webot tutorial 4 \n \n Webot tutorial 5 \n \n Webot tutorial\xa0 6 \n \n NX練習 \n \n', 'tags': '', 'url': 'Week10~Week14.html'}, {'title': 'NX', 'text': '第 6 章 \n \u3000\u3000 ASSEMBLY MODELING 適用於裝配的功能，能夠將許多組件組成模型。 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0  \n 6-2 裝配方式 \n 功能鍵： \n 對齊：選擇兩個要對齊的平面，按下對齊後兩個面並會平行或接觸在一起。 \n 同心：選起兩個圓柱面或圓，按下同心或將兩個約束在同一個中心。 \n 距離：在兩個物件之中約束兩著的距離。 \n 平行：選取的物件互相平行。 \n 垂直：選取的物件互相垂直。 \n 接合：將物件互相綁定，以便一起移動。 \n 放入：將物體放如其中。 \n 角度：限制兩個線或面的角度。 \n \n 範例： \n 1.創建一個新文件 \n \n 2. 在 Assembly 選項卡下選擇 Model \n 3.將單位設置為 Cetermeter \n 如果在開始選單未選擇組合件也可以在應用模組上改 \n 選擇組合件，新增，放入檔案。 \n \n 放入時可以選擇方向再按套用。 \n \n 選擇組合件約束，一般組合件需要兩三個約束。 \n \n 一開始我先選擇接觸，綁在同一個平面。 \n 再來選擇對齊。 \n \n \n \n \n', 'tags': '', 'url': 'NX.html'}, {'title': 'Week15~Week18', 'text': '15週報告 \n \n NX練習 \n \n 16周報告 \n \n 17周報告 \n \n Building a clean model tutorial翻譯 \n \n \n \n', 'tags': '', 'url': 'Week15~Week18.html'}, {'title': 'Building a clean model tutorial翻譯', 'text': "這篇教學會教你建構機器人或仿真模型，是一個很重要的項目，建立能夠具有美觀、快速顯示的仿真模型。 \n \n 第一步：建立一個建立一個大致的形狀 \n 在構建新模型時，我們先處理他的視覺方面：動態方面（簡化模型並不合理之處），關節、傳感器等將在以後階段進行處理。 \n 先創建基本形狀，在[ Menu bar --> Add --> Primitive shape -->\xa0 \xa0]可以建立。我們可以先針對純型態對動態優化，也可以關閉動態模擬，由於基本形狀將是簡單的網格，對於我們的應用程序，可能沒有足夠的細節或幾何精度。 在這種情況下，我們的另一個選擇是從外部程式導入網格。 \n 從外部程式導入CAD數據時，最重要的是確保CAD模型會不會太複雜(不包含太多三角形)。 這項要求很重要，因為複雜模型的顯示速度會很慢，並且還會減慢以後可能使用的各種計算模塊（例如最小距離計算或動力學）。\xa0以下示例通常是無用的（即使我們會在後面有方法可以簡化CoppeliaSim中的數據）： \n \n 上面的CAD數據非常重：它包含許多三角形（超過47'000個），如果我們只在新的場景中使用單個三角形的實例，這是可以的。 但是大多數時候，您需要同一機器人的模擬多個實例，連接各種類型的grippers，並可能使這些機器與其他機器、設備或環境進行交互。 在這種情況下，模擬場景可能會變得太慢。 通常，我們建議不對有超過2萬個三角形的機器人進行建模。在大多數情況下，5 000至10 000個三角形為比較平均。 \n \n \n \n \n \n \n \n 是什麼上述模型如此重？首先，孔以及小細節的模型將很多的三角形面才能正確表示。因此，如果可以修改，先嘗試從原始模型中刪除所有的孔、螺釘、物體的內部等。如果您將原始模型表示為參數化曲面/物件，則通常在大多數情況下只需選擇並刪除它們即可（例如在Solidworks中）。第二個重要步驟是以有限的精度導出原始數據：大多數CAD應用程序都允許您修改導出的網格的細節等級。當工程圖由大小物件組成時，分幾步導出物件可能也很重要。這是為了避免大物件定義太過精確（三角形太多）和小對象定義太簡易（三角形太少）：首先簡單地導出大物件（通過調整所需的精度設置），然後導出小物件（通過調整精度設置） ）。 \n \n CoppeliaSim當前支持以下CAD格式：OBJ，STL，DXF，3DS（僅Windows）和Collada。 還支持URDF，但此處未提及，因為它不是基於純網格的文件格式。 現在，假設我們已按照上一節中所述應用了所有可能的簡化。 導入後，我們可能最終仍然會留下一個過重的網格： \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 您會注意到整個機器人是作為單個網格導入的。   稍後我們將看到如何對其進行適當劃分。   還要注意導入的網格的方向是否錯誤：最好保持其方向不變，直到構建整個模型為止，因為如果在以後的階段中我們要導入與同一機器人相關的其他項目，它們將   自動具有相對於原始網格的正確位置/方向。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 在此階段，我們可以使用多種功能來簡化網格： \n \n \n \n \n ．Automatic mesh division: 允許為未通過公共邊鏈接在一起的所有元素生成新形狀。 這並不總是適用於選定的網格，但是總是值得一試的，因為與必須同時處理所有元素相比，處理網格元素可以為我們提供更多的控制權。 可以通過[ Menu bar --> Edit --> Grouping/Merging --> Divide selected shapes]使用 該功能。 有時，網格劃分會超出預期。 在這種情況下，只需將邏輯上屬於一起的元素（具有相同的視覺屬性並且屬於同一鏈接的一部分）合併回一個單一形狀（ [Menu bar --> Edit -> Grouping/Merging --> Merge selected shapes ]）。 \n ．Extract the convex hull: 通過將其轉換為凸包來簡化網格。 可以通過[ Menu bar --> Edit --> Morph selection into convex shapes ]使用該功能。 ．Decimate the mesh: 減少網格中包含的三角形數量。 可以通過[ Menu bar --> Edit --> Decimate selected shape ...]訪問該功能。 ．Remove the inside of the mesh: 允許通過刪除其內部來簡化網格。 此功能基於視覺傳感器，根據所選設置可能會或多或少地令人滿意。 可以通過[ Menu bar --> Edit --> Extract inside of selected shape ]訪問該功能。 \n 沒有應用上述功能的預定義順序（列表中的第一項除外，應首先嘗試該項），它在很大程度上取決於我們要簡化的網格的幾何形狀。 下圖說明了應用於導入的網格的上述功能（假設列表中的第一項不起作用）： \n \n 請注意，凸包在現階段如何對我們沒有幫助。我們決定首先使用\xa0mesh decimation function，然後運行兩次該功能，以將三角形的數量總共除以50。完成後，我們提取簡化形狀的內部並將其丟棄。我們最終得到的網格總共包含2660個三角形（原始導入的網格包含了136000個三角形！）。形狀包含的三角形/頂點的數量可以在形狀幾何對話框中看到。對於整個機器人模型，2660三角形是極少的三角形，因此視覺外觀可能會因此受到影響。 \n 在這一階段，我們可以開始將機器人劃分為單獨的鏈接（請記住，我們目前整個機器人只有一個形狀）。您可以通過兩種不同的方式執行此操作： \n ．Automatic mesh division ：此功能已在上一節中進行了描述，它將檢查形狀並為未通過公共邊鏈接在一起的所有元素生成新形狀。這並不總是有效，但總是值得嘗試的。可以通過[ Menu bar --> Edit --> Grouping/merging --> Divide selected shapes ]訪問該功能。 ．Manual mesh division: ：通過三角形編輯模式，您可以手動選擇邏輯上不屬於邏輯的三角形，然後單擊“提取形狀”。這將在場景中生成新形狀。完成該操作後，刪除選定的三角形。 對於我們的模型，方法1可以正常工作： \n \n 我們可以進一步細化/簡化單個形狀。 有些時候如果改用凸包，形狀可能會看起來更好。 有時您將不得不反複使用上述幾種技術，以獲得所需的結果。 以下網格為例： \n \n \n \n \n \n \n \n \n 上面形狀的問題是，由於其中包含孔，我們無法很好地簡化它。   因此，我們必須通過形狀編輯模式進行更複雜的處理，在該模式下，我們可以提取邏輯上屬於同一凸形子實體的單個元素。   此過程可能需要進行多次迭代：我們首先提取3個近似凸元素。   現在，我們忽略作為兩個孔的一部分的三角形。   在形狀編輯模式下編輯形狀時，可以方便地切換可見性圖層，以查看其他場景項所覆蓋的內容。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 我們最終得到三個形狀的總和，但是其中兩個將需要進一步改進。   現在我們可以刪除作為孔的一部分的三角形。   最後我們分別提取3種形狀的凸包，然後將其與[ Menu bar --> Edit --> Grouping/Merging --> merge selected shapes ]合併在一起： \n \n \n \n \n \n \n 在CoppeliaSim中，我們可以啟用/禁用每種形狀的邊緣顯示。我們還可以指定邊緣顯示時要考慮的角度。相似的參數是陰影角，它指示形狀將在多方面顯示。這些參數以及其他一些參數（例如形狀顏色）可以在形狀屬性中進行調整。請記住，形狀有多種風味。到目前為止，在本教程中，我們僅處理簡單的形狀：簡單的形狀具有一組視覺屬性（即一種顏色，一個陰影角度等）。如果合併兩個形狀，則結果將是一個簡單的形狀。您還可以對形狀進行分組，在這種情況下，每個形狀將保留其視覺屬性。 在下一步中，我們可以合併邏輯上屬於一起的元素（如果它們屬於同一剛性元素，並且具有相同的視覺屬性）。然後，我們更改各種元素的視覺屬性。調整具有不同顏色和視覺屬性的幾種形狀的最簡便方法，如果我們使用特定的字符串來命名顏色，則以後可以輕鬆地以編程方式更改該顏色，即使該形狀是複合形狀的一部分。然後，我們選擇所有具有相同視覺屬性的形狀，然後控制選擇已調整的形狀，然後單擊“應用於選擇”，一次是“顏色”，一次是其他屬性，在形狀屬性中：這將轉移所有所選形狀的視覺屬性（如果提供的話，還包括顏色名稱）。我們最終得到17個單獨的形狀： \n \n \n 現在，我們可以使用[ Menu bar --> Edit --> Grouping/merging -> Group selected shapes ]對屬於同一鏈接的形狀進行分組。 我們最終得到7個形狀：機器人的基礎（或機器人的層次結構樹的基礎）和6個移動鏈接。 正確命名對像也很重要：您可以通過雙擊場景層次結構中的對象名稱來做到這一點。 基礎應始終是機械手或模型名稱，其他對象應始終包含基礎對象名稱，例如：robot（基礎），robot_link1，robot_proximitySensor等。通過默認，形狀將分配給可見性層1，但可以 在對象通用屬性中進行更改。 默認情況下，僅激活場景的可見性層1-8。 現在，我們有了以下內容（模型ResizableFloor_5_25模型在模型屬性對話框中暫時不可見）： \n \n \n 創建或修改形狀時，CoppeliaSim將自動設置其參考框架的位置和方向。 形狀的參考框架將始終位於形狀的幾何中心。 將選擇框架方向，以便形狀的邊界框保持盡可能小。 這並不總是看起來不錯，但是我們隨時可以隨時調整形狀的參考框架的方向。 現在，我們可以使用[ Menu bar --> Edit --> Reorient bounding box --> with reference frame of world ]重新調整所有已創建形狀的參考框架。 您有更多選項可以在形狀幾何對話框中重新定向參考框架。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", 'tags': '', 'url': 'Building a clean model tutorial翻譯.html'}, {'title': '期末報告', 'text': '期末報告影片 \n', 'tags': '', 'url': '期末報告.html'}, {'title': 'Note', 'text': 'solvespace 常用指令: \n shift+W 建立平面 \n P 點 \n C 圓 \n A 曲線 \n S 線 \n D 標註 \n N 角度標註 \n M 鎖定中心 \n V 鉛直 \n H 水平 \n Q 兩線相同 \n O 重和 \n G 建構線 \n W 回到平面 \n F 縮放到零件位置 \n shift+X 長出 \n shift+L 旋轉長出 \n shift+A 圓角\xa0 \n \n', 'tags': '', 'url': 'Note.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.', 'tags': '', 'url': 'Develop.html'}]};